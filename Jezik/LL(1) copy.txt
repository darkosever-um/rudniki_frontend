Begin ::= Start
        | Function
        | Assign CommandSet
        | Non_Assign_Command CommandSet        
        | Expr;                                  

Non_Assign_Command ::= Loop | Print; 

BeginPrime ::= CommandSet | Bitwise | FunctionCall    

Start ::= STRING "{" Minetype "}";
Minetype ::= SURFACE "{" "[" Landelements "]" "}" | UNDERGROUND "{" "[" Undergroundelements "]" "}" | IN_PLACE "{" "[" Landelements "]" "}" | IN_SITU "{" "[" Landelements "]" "}" | DEEP_SEA "{" "[" Seaelements "]" "}";

--------------------
/* tipi rudnikov  */
--------------------
Landelements ::= Landelements_Element LandelementsPrime;
LandelementsPrime ::= "," Landelements_Element LandelementsPrime | '';

Undergroundelements ::= Undergroundelements_Element UndergroundelementsPrime;
UndergroundelementsPrime ::= "," Undergroundelements_Element UndergroundelementsPrime | '';

Seaelements ::= Seaelements_Element SeaelementsPrime;
SeaelementsPrime ::= "," Seaelements_Element SeaelementsPrime | '';


Landelements_Element ::= "{" Landelements_Curly_Choice "}" | "[" Landelements_Bracket_Choice "]";

Landelements_Curly_Choice ::=   TOKEN_PATH Path_Vsebina
                            |  TOKEN_RIVER River_Vsebina;

Path_Vsebina ::= Line Lines | Polyline Lines | Bend Lines

River_Vsebina ::=  Line Lines | Polyline Lines | Bend Lines

Landelements_Bracket_Choice ::= TOKEN_STRIP Strip_Vsebina
                            |  TOKEN_BENCH Bench_Vsebina
                            |  TOKEN_SPOILPIT Spoilpit_Vsebina
                            |  TOKEN_PLANT Plant_Vsebina
                            |  TOKEN_WELL Well_Vsebina;

Strip_Vsebina ::= Arbitarraypolygon | Box

Bench_Vsebina ::= Arbitarraypolygon;
Spoilpit_Vsebina ::= Arbitarraypolygon | Box | Circ;

Plant_Vsebina_Factored ::= Arbitarraypolygon | Box | Circ;

Well_Vsebina ::= Point;

Undergroundelements_Element ::= "{" Undergroundelements_Curly_Choice "}" | "[" Undergroundelements_Bracket_Choice "]";

Undergroundelements_Curly_Choice ::= TOKEN_ELEVATOR Elevator_Vsebina
                                    | TOKEN_OREBED Orebed_Vsebina;

Elevator_Vsebina ::= ELEVATORTYPE | Point;
Orebed_Vsebina ::= Arbitarraypolygon | Box | Circ;

Undergroundelements_Bracket_Choice ::= TOKEN_TUNNEL Tunnel_Vsebina
                                    |  TOKEN_SHAFT Shaft_Vsebina;

Tunnel_Vsebina ::= Polyline Lines | Line Lines | Bend Lines;
Shaft_Vsebina ::=  Polyline Lines | Line Lines | Bend Lines;

Seaelements_Element ::= "{" Seaelements_Curly_Choice "}";

Seaelements_Curly_Choice ::=  TOKEN_PLATFORM Platform_Vsebina
                            | TOKEN_PUMP Pump_Vsebina
                            | TOKEN_RISER Riser_Vsebina;

Platform_Vsebina ::= Arbitarraypolygon | Box | Circ;
Pump_Vsebina ::= Point;
Riser_Vsebina ::= Point;


DOUBLE ::= Bitwise | FunctionCall;

Lines ::= "," "{" STRING Lines_Content "}" Lines | '';
Lines_Content ::= "(" Lines_Item_Content_After_Paren ")";
Lines_Item_Content_After_Paren ::= "[" Points "]"
                                 | Point "," Point Lines_Bend_Opt;
Lines_Bend_Opt ::= "," DOUBLE | '';

Arbitarraypolygon ::= TOKEN_POLYGON "(" "[" Points "]" ")";
Polyline ::= TOKE_POLYLINE "(" "[" Points "]" ")";
Line ::= TOKEN_LINE "(" Point "," Point ")";
Box ::= TOKEN_BOX "(" Point "," Point ")";
Points ::= Point PointsPrime;
PointsPrime ::= "," Point PointsPrime | '';
Point ::= TOKEN_POINT "(" DOUBLE "," DOUBLE ")";
Bend ::= TOKEN_BEND "(" Point "," Point "," DOUBLE ")";
Circ ::= TOKEN_CIRC "(" Point "," DOUBLE ")";

PLANTTYPE ::= washing | procesing | storage;
WELLTYPE ::= monitoring | injection | recovery;
ELEVATORTYPE ::= human | ore;

Expr ::= Bitwise;
Bitwise ::= Additive BitwisePrime;
BitwisePrime ::= bwand Additive BitwisePrime | bwor Additive BitwisePrime | '';
Additive ::= Multiplicative AdditivePrime;
AdditivePrime ::= plus Multiplicative AdditivePrime | minus Multiplicative AdditivePrime | '';
Multiplicative ::= Unary MultiplicativePrime;
MultiplicativePrime ::= times Unary MultiplicativePrime | divide Unary MultiplicativePrime | '';
Unary ::= plus Primary | minus Primary | Primary;
Primary ::= DOUBLE | hex | variable | "(" Bitwise ")";

CommandSet ::= Command CommandSetPrime
CommandSetPrime ::= Command CommandSetPrime
CommandSetPrime ::= ''
Command ::= Loop
Command ::= Assign
Command ::= Print

Loop ::= "for" "(" Assign "to" Bitwise ")" "begin" BeginPrime "end;"
Assign ::= "double" variable ":=" Assign_desno
Assign_desno ::= Bitwise ";"
Assign_desno ::= FunctionCall ";"
Print ::= "CONSOLE" Bitwise ";"

Function ::= FUNNAME "(" Atribute ")" "{" BeginPrime return DOUBLE "}"
Atribute ::= DOUBLE AtributePrime | hex AtributePrime| variable AtributePrime;
AtributePrime ::= "," DOUBLE AtributePrime | "," hex AtributePrime | "," variable AtributePrime | '';
FunctionCall ::= "call" FUNNAME "(" Atribute ")";